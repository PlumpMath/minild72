{:rename-macros {}, :renames {}, :externs {Error {}, window {AudioContext {}, webkitAudioContext {}}}, :use-macros {}, :excludes #{}, :name hum.core, :imports nil, :requires nil, :uses nil, :defs {curr-time {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 62, :column 7, :end-line 62, :end-column 16, :arglists (quote ([ctx]))}, :name hum.core/curr-time, :variadic false, :file "out/hum/core.cljs", :end-column 16, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, create-convolver {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 36, :column 7, :end-line 36, :end-column 23, :arglists (quote ([ctx]))}, :name hum.core/create-convolver, :variadic false, :file "out/hum/core.cljs", :end-column 23, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, create-context {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 81, :column 7, :end-line 81, :end-column 21, :arglists (quote ([]))}, :name hum.core/create-context, :variadic false, :file "out/hum/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, create-osc {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 3, :column 7, :end-line 3, :end-column 17, :arglists (quote ([ctx] [ctx type])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ctx] [ctx type]), :arglists ([ctx] [ctx type]), :arglists-meta (nil nil)}}, :name hum.core/create-osc, :variadic false, :file "out/hum/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ctx] [ctx type]), :arglists ([ctx] [ctx type]), :arglists-meta (nil nil)}, :method-params ([ctx] [ctx type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 2, :fn-var true, :arglists ([ctx] [ctx type])}, note-off {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 75, :column 7, :end-line 75, :end-column 15, :arglists (quote ([output & {:keys [time ramp-time], :or {time (curr-time (ctx-for output)), ramp-time 0.1}}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(output {:keys [time ramp-time], :or {time (curr-time (ctx-for output)), ramp-time 0.1}})], :arglists ([output & {:keys [time ramp-time], :or {time (curr-time (ctx-for output)), ramp-time 0.1}}]), :arglists-meta (nil)}}, :name hum.core/note-off, :variadic true, :file "out/hum/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(output {:keys [time ramp-time], :or {time (curr-time (ctx-for output)), ramp-time 0.1}})], :arglists ([output & {:keys [time ramp-time], :or {time (curr-time (ctx-for output)), ramp-time 0.1}}]), :arglists-meta (nil)}, :method-params [(output {:keys [time ramp-time], :or {time (curr-time (ctx-for output)), ramp-time 0.1}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists ([output & {:keys [time ramp-time], :or {time (curr-time (ctx-for output)), ramp-time 0.1}}])}, create-biquad-filter {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 42, :column 7, :end-line 42, :end-column 27, :arglists (quote ([ctx]))}, :name hum.core/create-biquad-filter, :variadic false, :file "out/hum/core.cljs", :end-column 27, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, ctx-for {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 51, :column 7, :end-line 51, :end-column 14, :arglists (quote ([audio-node]))}, :name hum.core/ctx-for, :variadic false, :file "out/hum/core.cljs", :end-column 14, :method-params ([audio-node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([audio-node]))}, freq {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 58, :column 7, :end-line 58, :end-column 11, :arglists (quote ([filter]))}, :name hum.core/freq, :variadic false, :file "out/hum/core.cljs", :end-column 11, :method-params ([filter]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([filter]))}, set-gain-to {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 12, :column 7, :end-line 12, :end-column 18, :arglists (quote ([channel val]))}, :name hum.core/set-gain-to, :variadic false, :file "out/hum/core.cljs", :end-column 18, :method-params ([channel val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([channel val]))}, create-gain {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 15, :column 7, :end-line 15, :end-column 18, :arglists (quote ([ctx] [ctx level])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ctx] [ctx level]), :arglists ([ctx] [ctx level]), :arglists-meta (nil nil)}}, :name hum.core/create-gain, :variadic false, :file "out/hum/core.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ctx] [ctx level]), :arglists ([ctx] [ctx level]), :arglists-meta (nil nil)}, :method-params ([ctx] [ctx level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists ([ctx] [ctx level])}, connect {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 46, :column 7, :end-line 46, :end-column 14, :arglists (quote ([& nodes])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(nodes)], :arglists ([& nodes]), :arglists-meta (nil)}}, :name hum.core/connect, :variadic true, :file "out/hum/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(nodes)], :arglists ([& nodes]), :arglists-meta (nil)}, :method-params [(nodes)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 0, :fn-var true, :arglists ([& nodes])}, note-on {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 68, :column 7, :end-line 68, :end-column 14, :arglists (quote ([output osc freq & {:keys [time ramp-time], :or {time (curr-time (ctx-for osc)), ramp-time 0.1}}])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(output osc freq {:keys [time ramp-time], :or {time (curr-time (ctx-for osc)), ramp-time 0.1}})], :arglists ([output osc freq & {:keys [time ramp-time], :or {time (curr-time (ctx-for osc)), ramp-time 0.1}}]), :arglists-meta (nil)}}, :name hum.core/note-on, :variadic true, :file "out/hum/core.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(output osc freq {:keys [time ramp-time], :or {time (curr-time (ctx-for osc)), ramp-time 0.1}})], :arglists ([output osc freq & {:keys [time ramp-time], :or {time (curr-time (ctx-for osc)), ramp-time 0.1}}]), :arglists-meta (nil)}, :method-params [(output osc freq {:keys [time ramp-time], :or {time (curr-time (ctx-for osc)), ramp-time 0.1}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 3, :fn-var true, :arglists ([output osc freq & {:keys [time ramp-time], :or {time (curr-time (ctx-for osc)), ramp-time 0.1}}])}, start-osc {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 65, :column 7, :end-line 65, :end-column 16, :arglists (quote ([osc]))}, :name hum.core/start-osc, :variadic false, :file "out/hum/core.cljs", :end-column 16, :method-params ([osc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([osc]))}, create-buffer-source {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 26, :column 7, :end-line 26, :end-column 27, :arglists (quote ([ctx] [ctx buffer])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ctx] [ctx buffer]), :arglists ([ctx] [ctx buffer]), :arglists-meta (nil nil)}}, :name hum.core/create-buffer-source, :variadic false, :file "out/hum/core.cljs", :end-column 27, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ctx] [ctx buffer]), :arglists ([ctx] [ctx buffer]), :arglists-meta (nil nil)}, :method-params ([ctx] [ctx buffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists ([ctx] [ctx buffer])}, connect-output {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 54, :column 7, :end-line 54, :end-column 21, :arglists (quote ([output]))}, :name hum.core/connect-output, :variadic false, :file "out/hum/core.cljs", :end-column 21, :method-params ([output]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([output]))}, set-buffer-to {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 23, :column 7, :end-line 23, :end-column 20, :arglists (quote ([buffer-src buffer]))}, :name hum.core/set-buffer-to, :variadic false, :file "out/hum/core.cljs", :end-column 20, :method-params ([buffer-src buffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([buffer-src buffer]))}, create-delay {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 33, :column 7, :end-line 33, :end-column 19, :arglists (quote ([ctx]))}, :name hum.core/create-delay, :variadic false, :file "out/hum/core.cljs", :end-column 19, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, create-dynamics-compressor {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/out/hum/core.cljs", :line 39, :column 7, :end-line 39, :end-column 33, :arglists (quote ([ctx]))}, :name hum.core/create-dynamics-compressor, :variadic false, :file "out/hum/core.cljs", :end-column 33, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:time :ramp-time}, :order [:time :ramp-time]}, :doc nil}