{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name pong.input, :imports nil, :requires {pu pong.util, pong.util pong.util}, :uses nil, :defs {key-pressed {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/src/pong/input.cljs", :line 5, :column 7, :end-line 5, :end-column 18, :arglists (quote ([state event]))}, :name pong.input/key-pressed, :variadic false, :file "src/pong/input.cljs", :end-column 18, :method-params ([state event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state event]))}, mouse {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/src/pong/input.cljs", :line 18, :column 7, :end-line 18, :end-column 12, :arglists (quote ([state event]))}, :name pong.input/mouse, :variadic false, :file "src/pong/input.cljs", :end-column 12, :method-params ([state event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state event]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :court-height :key :else :w :s :c :paddle :h :player}, :order [:key :w :player :paddle :y :s :else :court-height :c :h]}, :doc nil}