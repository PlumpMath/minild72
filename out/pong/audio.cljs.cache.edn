{:rename-macros {}, :renames {}, :externs {setTimeout {}, Object {}, Math {pow {}}}, :use-macros {go cljs.core.async.macros}, :excludes #{}, :name pong.audio, :imports nil, :requires {hum hum.core, hum.core hum.core, cljs.core.async cljs.core.async}, :uses {close! cljs.core.async, chan cljs.core.async}, :defs {ctx {:name pong.audio/ctx, :file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :line 7, :column 1, :end-line 7, :end-column 9, :meta {:file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :line 7, :column 6, :end-line 7, :end-column 9}, :tag any}, vco {:name pong.audio/vco, :file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :line 8, :column 1, :end-line 8, :end-column 9, :meta {:file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :line 8, :column 6, :end-line 8, :end-column 9}, :tag any}, vcf {:name pong.audio/vcf, :file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :line 9, :column 1, :end-line 9, :end-column 9, :meta {:file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :line 9, :column 6, :end-line 9, :end-column 9}, :tag any}, output {:name pong.audio/output, :file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :line 10, :column 1, :end-line 10, :end-column 12, :meta {:file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :line 10, :column 6, :end-line 10, :end-column 12}, :tag any}, timeout {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :line 24, :column 7, :end-line 24, :end-column 14, :arglists (quote ([ms]))}, :name pong.audio/timeout, :variadic false, :file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :end-column 14, :method-params ([ms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ms]))}, beep {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :line 29, :column 7, :end-line 29, :end-column 11, :arglists (quote ([freq & {:keys [duration], :or {duration 100}}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(freq {:keys [duration], :or {duration 100}})], :arglists ([freq & {:keys [duration], :or {duration 100}}]), :arglists-meta (nil)}}, :name pong.audio/beep, :variadic true, :file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(freq {:keys [duration], :or {duration 100}})], :arglists ([freq & {:keys [duration], :or {duration 100}}]), :arglists-meta (nil)}, :method-params [(freq {:keys [duration], :or {duration 100}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists ([freq & {:keys [duration], :or {duration 100}}])}, note-num-to-frequency {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :line 37, :column 7, :end-line 37, :end-column 28, :arglists (quote ([note-num]))}, :name pong.audio/note-num-to-frequency, :variadic false, :file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :end-column 28, :method-params ([note-num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([note-num]))}, beep-paddle {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :line 45, :column 7, :end-line 45, :end-column 18, :arglists (quote ([]))}, :name pong.audio/beep-paddle, :variadic false, :file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, beep-wall {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :line 48, :column 7, :end-line 48, :end-column 16, :arglists (quote ([]))}, :name pong.audio/beep-wall, :variadic false, :file "/Users/juanuys/Documents/quil/pong/src/pong/audio.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {m cljs.core.async.macros, cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:sawtooth :else :recur :duration}, :order [:sawtooth :duration :recur :else]}, :doc nil}