{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name pong.physics, :imports nil, :requires {pd pong.dom, pong.util pong.util, ps pong.setup, pong.leaderboard pong.leaderboard, pu pong.util, pl pong.leaderboard, pong.setup pong.setup, pong.audio pong.audio, pa pong.audio, pong.dom pong.dom}, :uses nil, :defs {collision-factor {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/src/pong/physics.cljs", :line 10, :column 7, :end-line 10, :end-column 23, :arglists (quote ([paddle ball]))}, :name pong.physics/collision-factor, :variadic false, :file "/Users/juanuys/Documents/quil/pong/src/pong/physics.cljs", :end-column 23, :method-params ([paddle ball]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([paddle ball]))}, collision {:protocol-inline nil, :meta {:file "/Users/juanuys/Documents/quil/pong/src/pong/physics.cljs", :line 15, :column 7, :end-line 15, :end-column 16, :arglists (quote ([state]))}, :name pong.physics/collision, :variadic false, :file "/Users/juanuys/Documents/quil/pong/src/pong/physics.cljs", :end-column 16, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :court-height :ball :bot :else :court-width :hits :c :paddle :h :score :player :x :ball-dir}, :order [:y :h :ball :x :paddle :player :bot :court-height :c :court-width :ball-dir :hits :score :else]}, :doc nil}